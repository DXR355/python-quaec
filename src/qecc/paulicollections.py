#!/usr/bin/python
# -*- coding: utf-8 -*-
##
# paulicollections.py: 
##
# Â© 2012 Christopher E. Granade (cgranade@gmail.com) and
#     Ben Criger (bcriger@gmail.com).
# This file is a part of the QuaEC project.
# Licensed under the AGPL version 3.
##
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

## IMPORTS ##

from PauliClass import Pauli, ensure_pauli, from_generators, elem_gens

## ALL ##

__all__ = [
    'PauliList'
    ]
        
## CLASSES ##

class PauliList(list):
    r"""
    Subclass of :obj:`list` offering useful methods for lists of
    :class:`qecc.Pauli` instances.
    
    :param paulis: Instances either of :obj:`str` or :class:`qecc.Pauli`.
        Strings are passed to the constructor of :class:`qecc.Pauli` for
        convinenence.
    """

    def __init__(self, *paulis):
        paulis = map(ensure_pauli, paulis)
        # FIXME: figure out why super(list, self).__init__ doesn't work.
        list.__init__(self, paulis)
        
    def __getitem__(self, *args):
        item = super(PauliList, self).__getitem__(*args)
        if not isinstance(item, list):
            return item
        else:
            return PauliList(*item)
        
    def __getslice__(self, *args):
        # Note that this must be overrided due to an implementation detail of
        # CPython. See the note at
        #     http://docs.python.org/reference/datamodel.html#additional-methods-for-emulation-of-sequence-types
        return PauliList(*super(PauliList, self).__getslice__(*args))
        
    def generated_group(self):
        """
        Yields an iterator onto the group generated by this list of Pauli
        operators. See also :obj:`qecc.from_generators`.
        """
        return from_generators(self)
        
    def centralizer_gens(self, group_gens=None):
        if group_gens is None:
            # NOTE: Assumes all Paulis contained by self have the same nq.
            Xs, Zs = elem_gens(len(self[0]))
            group_gens = Xs + Zs
            
        if len(self) == 1:
            print self[0], 'group_gens', group_gens
            centralizer_0 = self[0].centralizer_gens()
            print centralizer_0
        else:
            # FIXME: [0:-1] returns a list, not a PauliList!
            centralizer_0 = self[0].centralizer_gens()
            print centralizer_0
            print self[1:]
            centralizer_1 = self[1:].centralizer_gens(group_gens=centralizer_0)
            print 'c1', centralizer_1
            return centralizer_1
        
